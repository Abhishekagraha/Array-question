class Solution {
public:
// Brute force approach
    int bruteforce(vector<int>& nums) {
         int lsum=0;
         int rsum=0;
        int n=nums.size();

        for(int i=0;i<nums.size();i++){
             lsum=0;
             rsum=0;
            for(int j=0;j<i;++j){
                lsum += nums[j];
            }
            for(int j=i+1;j<nums.size();j++){
                rsum += nums[j];
            }
           
            if(lsum == rsum) return i;
            //cout<<"lsum"<< lsum <<" rsum "<<rsum << endl;
        }
       // cout<<"lsum"<< lsum <<" rsum "<<rsum << endl;
        return -1;
        
    }
 // optimise solution
    int prefixaproachsoln(vector<int>& nums){
        vector<int> lsum(nums.size(),0);
        vector<int> rsum(nums.size(),0);

        // find lsum array
        for(int i=1;i<nums.size();++i){
            lsum[i] = lsum[i-1]+nums[i-1]; 
        }
        // find rsum array
        for(int i=nums.size()-2;i>=0;--i){
            rsum[i] = rsum[i+1]+nums[i+1]; 
        }
        // check lsum and rsum array index
        for(int i=0;i<nums.size();++i){
           if( lsum[i] == rsum[i])
               return i;
        }
        return -1;
    }
    int pivotIndex(vector<int>& nums) {
      // return prefixaproachsoln(nums);
        return bruteforce(nums);
    }
};
